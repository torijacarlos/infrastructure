AWSTemplateFormatVersion: "2010-09-09" 

Parameters: 
  ProjectName: 
    Type: String
    AllowedPattern: "[a-z]+"
    Description: Project that will be using this network
  VPCCidr: 
    Type: String
    Default: "192.168.0.0/22"
    Description: Network's CIDR

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCidr 
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-vpc"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-ig"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # subnets

  ## private subnets

  PrivateSubnetLeft:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select 
        - 0
        - Fn::Cidr: [ !Ref VPCCidr, 4, 8 ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-privsubnet-left"

  PrivateSubnetRight:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select 
        - 1
        - Fn::Cidr: [ !Ref VPCCidr, 4, 8 ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-privsubnet-rigth"

  ## public subnets

  PublicSubnetLeft:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select 
        - 2
        - Fn::Cidr: [ !Ref VPCCidr, 4, 8 ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-pubsubnet-left"

  PublicSubnetRight:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: !Select 
        - 3
        - Fn::Cidr: [ !Ref VPCCidr, 4, 8 ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-pubsubnet-right"

  # nat gateways

  EIPLeft:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc

  NatGatewayLeft:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt [ EIPLeft, AllocationId ]
      SubnetId: !Ref PublicSubnetLeft
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-ng-left"

  # routing

  ## private route table

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-rt-private"

  PrivateRouteTableOut:
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGatewayLeft

  PrivateSubnetLeftRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetLeft

  ## public route table

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-rt-public"

  PublicRouteTableOutIPv4:
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  PublicRouteTableOutIPv6:
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationIpv6CidrBlock: "::/0"
      GatewayId: !Ref InternetGateway

  PublicSubnetLeftRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetLeft
  PublicSubnetRightRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetRight

  # security groups

  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-sg-ssh"

  HTTPSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http security group
      VpcId: !Ref VPC
      # allow access from the world
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-sg-https"

  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http security group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-sg-http"

  HTTPFromHTTPSInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt HTTPSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt HTTPSSecurityGroup.GroupId

  HTTPFromSSHInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt HTTPSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt SSHSecurityGroup.GroupId

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow db security group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-sg-db"

  DBFromHttpInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt DBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt HTTPSecurityGroup.GroupId

  DBFromSshInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt DBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !GetAtt SSHSecurityGroup.GroupId

Outputs:
  VpcId:
    Description: VPC Id
    Value: !Ref VPC

  VpcCIDR:
    Description: VPC CIDR
    Value: !GetAtt VPC.CidrBlock

  PublicSubnets:
    Description: Public subnets created for the stack
    Value: !Sub "${PublicSubnetRight},${PublicSubnetLeft}"

  PrivateSubnets:
    Description: Private subnets created for the stack
    Value: !Sub "${PrivateSubnetRight},${PrivateSubnetLeft}"

  SSHSecurityGroup:
    Description: Security group for https
    Value: !Ref SSHSecurityGroup

  HTTPSSecurityGroup:
    Description: Security group for https
    Value: !Ref HTTPSSecurityGroup

  HTTPSecurityGroup:
    Description: Security group for http
    Value: !Ref HTTPSecurityGroup

  DBSecurityGroup:
    Description: Security group for db
    Value: !Ref DBSecurityGroup